一、简单题

1、Mybatis动态sql是做什么的？都有哪些动态sql？简述一下动态sql的执行原理？
       动态生成sql，避免硬编码，容易维护。
       有四类动态sql。增insert、删delete、改update、查select
       动态sql执行的原理：
		1）根据sql的id查找对应的MappedStatement对象
		2）根据传入参数对象解析MappedStatement对象，得到最终要执行的sql和执行传入参数，入参组装成最终执行的sql。
		3）获取数据库连接，根据得到的最终sql语句到数据库执行，并得到执行结果。
		4）根据MappedStatement对象中的结果映射配置，对得到的执行结果进行转换处理，转成需要的数据类型，并得到最终的处理结果。
		5）释放连接

2、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？
        mybatis支持延迟加载
        使用：mybatis仅支持association关联对象和collection关联集合对象的延迟加载，
	  association指的是一对一，collection指的是一对多查询。
	  在mybatis配置文件中可以配置是否启用延迟加载lazyLoadingEnabled=true|false
        原理：使用CGLIB创建目标对象的代理对象，当调用目标方法时，静茹拦截器方法，比如调用a.getB().getName()，
	  拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，
	  然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。
	  不立即加载所有的对象信息。到使用的时候才去加载对象信息。
	  不需要关联表的数据，就不会去查询关联表的数据。

3、Mybatis都有哪些Executor执行器？它们之间的区别是什么？
        Mybatis有三种基本的执行器（Executor）:
        1）SimpleExecutor：每执行一次update或select，就开启一个statement对象，用完立刻关闭statement对象。
        2）ReuseExecutor：执行update或select，以sql作为key查找statement对象，存在就使用，不存在就创建，
	用完后，不关闭statement对象，而是放置在map内，供下一次使用。简言之，就是重复使用statement对象。
        3）BatchExecutor：执行update（没有select，JDBC批处理不支持select）,将所有sql都添加到批处理中（addBatch()）,
	等待统一执行（executeBatch()）,它缓存了多个statement对象，每个statement对象都是addBatch()完毕后，
	等待逐一执行executeBatch()批处理。与JDBC批处理相同。

4、简述下Mybatis的一级、二级缓存（分别从存储结构、范围、失效场景。三个方面来作答）？
         一级缓存：
	是sqlSession级别的缓存，相同的sql起作用。
	存储接口是HashMap，数据存储介质是内存。
	当执行insert，update，delete语句的时候，缓存失效。
         二级缓存：
	是mapper级别的缓存，相同的namespace下的sql共享。
	存储接口是HashMap，数据存储介质多种多样，可以是内存，可以是硬盘。
	当配置了二级缓存，类实现了serializable，并且调用了sqlSession.close(),缓存起作用。当执行insert，update，delete语句的时候，缓存失效。

5、简述Mybatis的插件运行原理，以及如何编写一个插件？
	实现原理：使用mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，
		然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。
	如何编写一个插件：
		1、sqlMapConfig.xml中添加插件配置
		      <plugins>
			<plugin interceptor="com.lagou.plugin.MySqlPagingPlugin">
				<property name = "" value=""/>
			<plugin>
		      </plugins>
		2、编写插件类，实现Interceptor接口
		3、使用注解@Intercepts配置拦截哪个接口，拦截哪个方法，入参是什么。
		4、重写intercept方法。这里是增强的逻辑。
